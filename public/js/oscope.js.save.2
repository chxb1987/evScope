"use strict";
var oscope = (function() {
  var m_canvas;
  var m_context;
  var m_width;
  var m_height;
  var m_h2;
  var m_trace = [];
  var m_voffset = [];
  // these must match the initial values of the controls
  // doh! no two way data bindind
  var mSecPerDiv		  		 = 0.100;
  var m_samples_per_second = 600;
  var m_divisions          = 10;
  var m_yscale             = 512;
  var m_sample_bits        = 10;
  var m_volts_per_div      = 5;
  var m_vrange             = 5;
  var m_cursor_index       = 2;
  var m_cursor_seconds     = 0.0;
  var m_cursor_volts       = 0.0;
  var m_run                = true;
  var m_size_index         = 0;
  var m_text_size          = 12;
  var m_updates            = 0;

  m_trace[0]           = null;
  m_trace[1]           = null;
  m_trace[2]           = null;
  m_trace[3]           = null;
  m_trace[4]           = null;
  m_trace[5]           = null;
  m_trace[6]           = null;
  m_trace[7]           = null;

/*
  m_voffset[0]         = 177;
  m_voffset[1]         = 132;
  m_voffset[2]         = 88;
  m_voffset[3]         = 42;
  m_voffset[4]         = -2;
  m_voffset[5]         = -48;
  m_voffset[6]         = -90;
  m_voffset[7]         = -138;
*/
  m_voffset[0]         = 0;
  m_voffset[1]         = 0;
  m_voffset[2]         = 0;
  m_voffset[3]         = 0;
  m_voffset[4]         = 0;
  m_voffset[5]         = 0;
  m_voffset[6]         = 0;
  m_voffset[7]         = 0;

  // ==============================================================
  // background display scaffolding
  // ==============================================================
  var outline_base = [
    [0.0,0.0],
    [1.0,0.0],
    [1.0,1.0],
    [0.0,1.0],
    [0.0,0.0]
  ];
  var outline;

  var xaxis_base = [
    [0.0,5.0/10.0,1.0,5.0/10.0], // channel 1
    [0.0,5.0/10.0,1.0,5.0/10.0]  // channel 2
  ];

  var xaxis;

  var vdiv_base  =  1.0/10.0;
  var vdiv;

  var mid_div_base = [
    0.0,5.0/10.0,1.0,5.0/10.0
  ];
  var mid_div = [0,0,0,0];

  var hgrid_base = [
    [0.0,1.0/10.0,1.0,1.0/10.0],
    [0.0,2.0/10.0,1.0,2.0/10.0],
    [0.0,3.0/10.0,1.0,3.0/10.0],
    [0.0,4.0/10.0,1.0,4.0/10.0],
    [0.0,5.0/10.0,1.0,5.0/10.0],
    [0.0,6.0/10.0,1.0,6.0/10.0],
    [0.0,7.0/10.0,1.0,7.0/10.0],
    [0.0,8.0/10.0,1.0,8.0/10.0],
    [0.0,9.0/10.0,1.0,9.0/10.0],
  ];var hgrid;

  var vgrid_base = [
    [1.0/10.0,0.0,1.0/10.0,1.0],
    [2.0/10.0,0.0,2.0/10.0,1.0],
    [3.0/10.0,0.0,3.0/10.0,1.0],
    [4.0/10.0,0.0,4.0/10.0,1.0],
    [5.0/10.0,0.0,5.0/10.0,1.0],
    [6.0/10.0,0.0,6.0/10.0,1.0],
    [7.0/10.0,0.0,7.0/10.0,1.0],
    [8.0/10.0,0.0,8.0/10.0,1.0],
    [9.0/10.0,0.0,9.0/10.0,1.0]
  ];
  var vgrid;

  var cursor_base = [
    [0.0,0.0,0.0,1.0],  // 0 horizontal
    [0.0,0.0,0.0,1.0],  // 1 horizontal
    [0.0,0.0,1.0,0.0],  // 2 vertical
    [0.0,0.0,1.0,0.0],  // 3 vertical
  ];
  var m_cursor;

  // responsive sizes for canvas
  // aspect ratio of available sizes needs to be 4 over 3
  // and must fit the twitter boostrap grid size allocated
  var canvas_size = [
    {width:600,height:450},
    {width:400,height:300},
    {width:200,height:150}
  ];

  // responsive text size
  var text_size = [
      12,
      8,
      6
  ];

  function getCanvasSize(window_height,parent_width,parent_height) {
    var r;
    if (window_height > parent_height) {
      parent_height = window_height;
    }
    var s = canvas_size.filter(function(v) {
      return ((v.width < parent_width)&&(v.height < parent_height));
    });

    // if nothing matches
    if (s.length <= 0) {
      // use the smallest
      r = s[2];
    }
    else {
      // use first fit
      r = s[0];
    }

    return r;
  }

  function getTextSize(width) {
    var s;

    s = canvas_size.reduce(function(p,v,i) {
      return (width <= v.width) ? text_size[i] : p;
    },text_size[2]);

    return s;
  }

  function rescale(w,h) {
    // rescale horizontal divisions
    hgrid = hgrid_base.map(function (v) {
      var d = new Array(4);
      d[0] = v[0] * w;
      d[1] = v[1] * h;
      d[2] = v[2] * w;
      d[3] = v[3] * h;
      return d;
    });


    // rescale vertical division size
    vdiv = vdiv_base * h;

    // rescale vertical divisions
    vgrid = vgrid_base.map(function(v) {
      var d = new Array(4);
      d[0] = v[0] * w;
      d[1] = v[1] * h;
      d[2] = v[2] * w;
      d[3] = v[3] * h;
      return d;
    });

		// 2018.03. delete by jsk
    // scale channel axes
    xaxis = xaxis_base.map(function(v) {
      var d = new Array(4);
      d[0] = v[0] * w;
      d[1] = v[1] * h;
      d[2] = v[2] * w;
      d[3] = v[3] * h;
      return d;
    });

    // rescale outline
    outline = outline_base.map(function(v) {
      var d = [0,0];
      d[0] = v[0] * w;
      d[1] = v[1] * h;
      return d;
    });

    // rescale cursor
    m_cursor = cursor_base.map(function(v) {
      var d = new Array(4);
      d[0] = v[0] * w;
      d[1] = v[1] * h;
      d[2] = v[2] * w;
      d[3] = v[3] * h;
      return d;
    });

    // rescale mid divider
    mid_div[0] = mid_div_base[0] * w;
    mid_div[1] = mid_div_base[1] * h;
    mid_div[2] = mid_div_base[2] * w;
    mid_div[3] = mid_div_base[3] * h;
  }

  function clear(ctx,width,height) {
    ctx.fillStyle = "black";
    ctx.fillRect(0,0,width,height);
  }

  function drawLine(ctx,line)  {
      ctx.beginPath();
      ctx.moveTo(line[0],line[1]);
      ctx.lineTo(line[2],line[3]);
      ctx.stroke();
  }

  function drawLines(ctx,lines) {
    lines.forEach(function(v) {
      drawLine(ctx,v);
    });
  }

  function drawPath(ctx,path) {
    ctx.beginPath();
    ctx.moveTo(path[0][0],path[0][1]);
    path.slice(1).forEach(function(v) {
      ctx.lineTo(v[0],v[1]);
    });
    ctx.stroke();
  }

  function drawBackground(ctx,width,height,voffset) {
    // clear background
    clear(ctx,width,height);

    // draw geometry with cartesian coordinates (0,0) lower left
    ctx.save();
    ctx.translate(0,height);
    ctx.scale(1.0,-1.0);

    // draw the outline
    ctx.save();
    ctx.strokeStyle = 'gray';
    ctx.lineWidth   = 6;
    drawPath(ctx,outline);
    ctx.restore();

    // draw the grid
    ctx.save();
    ctx.strokeStyle = "rgba(255,255,255,0.5)";
    ctx.lineWidth   = 1;
    ctx.setLineDash([1,1]);
    drawLines(ctx,hgrid);
    drawLines(ctx,vgrid);
    ctx.restore();

    // draw the x axes
    ctx.save();
    ctx.translate(0,voffset[0]);
    ctx.strokeStyle = "magenta";
    ctx.lineWidth   = 1;
    drawLine(ctx,xaxis[0]);
    ctx.restore();

    ctx.save();
    ctx.translate(0,voffset[1]);
    ctx.strokeStyle = "yellow";
    ctx.lineWidth   = 1;
    drawLine(ctx,xaxis[1]);
    ctx.restore();

    // draw the cursors
    ctx.save();
    ctx.lineWidth = 1;
    ctx.strokeStyle = "blue";
    drawLine(ctx,m_cursor[0]);
    drawLine(ctx,m_cursor[2]);
    ctx.strokeStyle = "orange";
    drawLine(ctx,m_cursor[1]);
    drawLine(ctx,m_cursor[3]);
    ctx.restore();

    ctx.restore();
  }

  function drawAnnotations(ctx,width,height,dy)
  {

    var t;
    var y;

    ctx.font = dy.toFixed(0) + "px monospace";
    ctx.fillStyle = "#01a9db";
    y = dy + 1;
//     ctx.fillText('sec/div     = ' + (mSecPerDiv*1.0).toFixed(3) + '     dS = ' + m_cursor_seconds.toFixed(4),2,y);
    y += dy + 1;
//    ctx.fillText('volts/div   = ' + m_volts_per_div.toFixed(4)   + '    dV = ' + m_cursor_volts.toFixed(4) ,2,y);
    y += dy + 22;
    ctx.fillText('  2.0MPA	'  ,2,y);
    y += dy + 80;
    ctx.fillText('  1.5	'  ,2,y);
    y += dy + 77;
    ctx.fillText('  1.0	'  ,2,y);
    y += dy + 77;
    ctx.fillText('  0.5	'  ,2,y);
    y += dy + 77;
    ctx.fillText('  0.0 '  ,2,y);
    y += dy + 2;
    ctx.fillText('  압력	'  ,2,y);


    y = dy + 1;
    y += dy + 1;
    ctx.fillStyle = "white";

    y += dy + 22;
    ctx.fillText('              0	'  ,2,y);
    y += dy + 80;
    ctx.fillText('            -0.025	'  ,2,y);
    y += dy + 77;
    ctx.fillText('            -0.05	'  ,2,y);
    y += dy + 77;
    ctx.fillText('            -0.075	'  ,2,y);
    y += dy + 77;
    ctx.fillText('             -0.1	'  ,2,y);
    y += dy + 2;
    ctx.fillText('             진공	'  ,2,y);

    y = dy + 1;
    y += dy + 1;
    ctx.fillStyle = "yellow";

    y += dy + 22;
    ctx.fillText('                                                                                             200C	'  ,2,y);
    y += dy + 80;
    ctx.fillText('                                                                                             150C	'  ,2,y);
    y += dy + 77;
    ctx.fillText('                                                                                             100C	'  ,2,y);
    y += dy + 77;
    ctx.fillText('                                                                                              50C	'  ,2,y);
    y += dy + 77;
    ctx.fillText('                                                                                              0C	'  ,2,y);
    y += dy + 2;
    ctx.fillText('                                                                                             온도	'  ,2,y);


    t = (m_run) ? ("RUN : " + m_updates.toFixed(0)) : "STOP";
    ctx.fillStyle = (m_run) ? 'lime' : 'red';
    ctx.fillText(t,2,height-4);
  }

  function computeVerticalScale ( height , yscale){ 
	 //divide by 2 to make scale for signed value
    return height / yscale ;
  }

  function computeHorizontalScale(seconds,samples_per_second,width) {
    return width / (seconds * samples_per_second);
  }

  function drawTrace(ctx,trace,width,height,voffset) {
		var	tempOffset = 0;
    var t = [];
    var ys;
    var hs;
    var i;

    // compute scale factors
//    ys = computeVerticalScale(m_vrange,m_yscale,m_height,m_volts_per_div * 10);
    hs = computeHorizontalScale(mSecPerDiv*m_divisions,m_samples_per_second,m_width);

    // compute horizonal scale

    ctx.save();
    ctx.translate(0,height);
    ctx.scale(1.0,-1.0);

    // set channel parameters
    switch(trace.channel) {
    case 0:
			tempOffset = 25;
	    ys = 450 / 250;
      // ctx.translate(xaxis[0][0],xaxis[0][1] + voffset);
      ctx.strokeStyle = "yellow";
      break;

    case 1:
			tempOffset = 0.25;
	    ys = 450 / 2.5; 
      // ctx.translate(xaxis[1][0],xaxis[1][1] + voffset);
      ctx.strokeStyle = "#2ECCFA";
      break;

    case 2:
			tempOffset = 0.1125;
	    ys = 450 / 0.125 ; 
      // ctx.translate(xaxis[1][0],xaxis[1][1] + voffset);
      ctx.strokeStyle = "magenta";
      break;

    case 3:
			tempOffset = 0.1;
//	    ys = 450 / 0.125 * (-1); 
	    ys = 450 / 0.125; 
      // ctx.translate(xaxis[1][0],xaxis[1][1] + voffset);
      ctx.strokeStyle = "white";
      break;

    case 4:
			tempOffset = 0.0875;
	    ys = 450 / 0.125 ; 
      // ctx.translate(xaxis[1][0],xaxis[1][1] + voffset);
      ctx.strokeStyle = "red";
      break;

    case 5:
			tempOffset = 0.075;
	    ys = 450 / 0.125 ; 
      // ctx.translate(xaxis[1][0],xaxis[1][1] + voffset);
      ctx.strokeStyle = "#FF8000";
      break;

    case 6:
			tempOffset = 0.0625;
	    ys = 450 / 0.125 ; 
      // ctx.translate(xaxis[1][0],xaxis[1][1] + voffset);
      ctx.strokeStyle = "gray";
      break;

    case 7:
			tempOffset = 0.05;
	    ys = 450 / 0.125 ; 
      // ctx.translate(xaxis[1][0],xaxis[1][1] + voffset);
      ctx.strokeStyle = "purple";
      break;
    }
    
    // scale the trace y axis
    // samples are Int16Array
    for(i=0;i<trace.length;++i) {
      t.push([i*hs,(trace.sample[i]+tempOffset) * ys]);
    }

    // draw it
    drawPath(ctx,t);
    
    ctx.restore();    
    // restore context
  }

  function onPaint(trace) {
    // draw oscope background
    drawBackground(m_context,m_width,m_height,m_voffset);

    // update trace if running and there is a new trace
    if (m_run & (trace !== null)) {
      // count updates
      m_updates++;
      // store the trace by channel
//      m_trace[trace.channel] = trace;
      m_trace[0] = trace[0];
      m_trace[1] = trace[1];
      m_trace[2] = trace[2];
      m_trace[3] = trace[3];
      m_trace[4] = trace[4];
      m_trace[5] = trace[5];
      m_trace[6] = trace[6];
      m_trace[7] = trace[7];
    }

    // draw last traces
    if (m_trace[0] !== null) {
      drawTrace(m_context, m_trace[0], m_width, m_height, m_voffset[0]);
    }
    if (m_trace[1] !== null) {
      drawTrace(m_context, m_trace[1], m_width, m_height, m_voffset[1]);
    }
    if (m_trace[2] !== null) {
      drawTrace(m_context, m_trace[2], m_width, m_height, m_voffset[2]);
    }
    if (m_trace[3] !== null) {
      drawTrace(m_context, m_trace[3], m_width, m_height, m_voffset[3]);
    }

    if (m_trace[4] !== null) {
      drawTrace(m_context, m_trace[4], m_width, m_height, m_voffset[4]);
    }

    if (m_trace[5] !== null) {
      drawTrace(m_context, m_trace[5], m_width, m_height, m_voffset[5]);
    }

    if (m_trace[6] !== null) {
      drawTrace(m_context, m_trace[6], m_width, m_height, m_voffset[6]);
    }

    if (m_trace[7] !== null) {
      drawTrace(m_context, m_trace[7], m_width, m_height, m_voffset[7]);
    }

    // draw text annotations
    drawAnnotations(m_context,m_width,m_height,m_text_size);
  }

  function onSampleBits(bits) {
    switch(bits) {
    case 8:
      m_sample_bits = 8;
      m_yscale      = 128;
      break;
		case 10:
      m_sample_bits = 10;
      m_yscale      = 512;
      break;
    case 12:
      m_sample_bits = 12;
      m_yscale      = 2048;
      break;
    case 16:
      m_sample_bits = 16;
      m_yscale      = 32768;
      break;
    default:
      m_sample_bits = 16;
      m_yscale      = 32768;
      break;
    }
    onPaint(null);
  }

